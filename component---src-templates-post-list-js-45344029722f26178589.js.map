{"version":3,"sources":["webpack://my-gatsby-site/./src/components/layout.js","webpack://my-gatsby-site/./src/templates/post-list.js"],"names":["pageTitle","children","paramSearch","useStaticQuery","window","URLSearchParams","location","search","get","useState","param","setParam","id","className","to","width","height","title","src","autoComplete","type","placeholder","value","onChange","event","target","console","log","onClick","fetch","then","response","json","resultData","navigate","state","data","props","posts","allPost","edges","map","node","index","key"],"mappings":"6IAiFA,IA9Ee,SAAC,GAA4B,EAA1BA,UAA2B,IAAhBC,EAAe,EAAfA,SAYvBC,IAVSC,QAAe,cAUV,IACI,oBAAXC,OAETF,EADe,IAAIG,gBAAgBD,OAAOE,SAASC,QAC9BC,IAAI,UAAY,GAErCN,EAAc,GAGhB,OAA0BO,cAASP,GAA5BQ,EAAP,KAAcC,EAAd,KAoBA,OACE,4BACE,uBAAKC,GAAG,UACN,uBAAKC,UAAU,kBACT,uBAAKA,UAAU,oBACb,uBAAKA,UAAU,yBACX,uBAAKA,UAAU,8CACX,gBAAC,KAAD,CAAMC,GAAG,KACL,uBAAKC,MAAM,OAAOC,OAAO,OAAOC,MAAM,YAAYC,IAAI,4EAKlE,uBAAKL,UAAU,2BACX,uBAAKA,UAAU,6BACX,uBAAKA,UAAU,4BACX,yBAAOD,GAAG,uBAAuBO,aAAa,MAC5CC,KAAK,OACLC,YAAY,SACZC,MAAOZ,EACPa,SAtCP,SAACC,GACpBb,EAASa,EAAMC,OAAOH,OACtBI,QAAQC,IAAIjB,EAAOc,EAAMC,OAAOH,UAqCR,0BAAQV,GAAG,wBAAwBgB,QAAS,WAhCpEC,MAAM,qDAAqDnB,GACxDoB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,IACJC,QAAS,iBAAwBxB,EAAO,CACtCyB,MAAM,CACJC,KAAMH,cA+BF,uBAAKpB,UAAU,0BACf,uBAAKA,UAAU,8BAKzB,uBAAKA,UAAU,aACZZ,M,iECtDT,UAhBa,SAACoC,GACVX,QAAQC,IAAIU,EAAMD,MAClB,IAAME,EAAQD,EAAMD,KAAKG,QAAQC,MAEjC,OACI,gBAAC,IAAD,KACA,2BACGF,EAAMG,KAAI,SAACC,EAAMC,GAChB,IAAM1B,EAAQyB,EAAKA,KAAKzB,MACxB,OAAO,uBAAK2B,IAAKD,GAAQ1B","file":"component---src-templates-post-list-js-45344029722f26178589.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Link, useStaticQuery, graphql, navigate } from 'gatsby'\r\n\r\nconst Layout = ({ pageTitle, children }) => {\r\n\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n          description\r\n        }\r\n      }\r\n    }\r\n  `)\r\n  let paramSearch = '';\r\n  if (typeof window !== 'undefined') {\r\n    const params = new URLSearchParams(window.location.search);\r\n    paramSearch = params.get(\"param\") || '';\r\n  } else {\r\n    paramSearch = '';\r\n  }\r\n\r\n  const [param, setParam] = useState(paramSearch)\r\n\r\n  const handleChange = (event) => {\r\n    setParam(event.target.value);\r\n    console.log(param, event.target.value)\r\n  }\r\n\r\n  const doSearch = () => {\r\n\r\n    fetch(`https://jsonplaceholder.typicode.com/todos?userId=${param}`)\r\n      .then(response => response.json()) // parse JSON from request\r\n      .then(resultData => {\r\n        navigate('/search' + '?param=' + param, {\r\n          state:{\r\n            data: resultData\r\n          }\r\n        });\r\n      })\r\n  }\r\n\r\n  return (\r\n    <main >\r\n      <div id=\"header\">\r\n        <div className=\"toolbar-inside\">\r\n              <div className=\"header-container\">\r\n                <div className=\"header-container-left\">\r\n                    <div className=\"toolbar-logo toolbar-subMenu-box header-fl\">\r\n                        <Link to=\"/\">\r\n                            <img width=\"24px\" height=\"24px\" title=\"shortpage\" src=\"https://trangianhuan.github.io/icon/awesome-icons/svg/user-shape.svg\" />\r\n                        </Link>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"header-container-middle\">\r\n                    <div className=\"toolbar-search onlySearch\">\r\n                        <div className=\"toolbar-search-container\">\r\n                            <input id=\"toolbar-search-input\" autoComplete=\"off\"\r\n                              type=\"text\"\r\n                              placeholder=\"search\"\r\n                              value={param}\r\n                              onChange={handleChange}/>\r\n                            <button id=\"toolbar-search-button\" onClick={() => doSearch()}></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"header-container-right\">\r\n                <div className=\"toolbar-btns onlyUser\"></div>\r\n                </div>\r\n              </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        {children}\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport Layout from \"../components/layout\";\r\n// import showdown  from \"showdown\";\r\n\r\nconst Post = (props) => {\r\n    console.log(props.data)\r\n    const posts = props.data.allPost.edges;\r\n    // var converter = new showdown.Converter()\r\n    return (\r\n        <Layout>\r\n        <div>\r\n          {posts.map((node, index) => {\r\n            const title = node.node.title\r\n            return <div key={index}>{title}</div>\r\n          })}\r\n        </div>\r\n      </Layout>\r\n    )\r\n  }\r\n\r\nexport default Post\r\n\r\nexport const query = graphql`\r\n  query blogListQuery($skip: Int!, $limit: Int!) {\r\n    allPost(\r\n      filter: {create_at: {ne: null}}\r\n      sort: { fields: [create_at], order: DESC }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      edges {\r\n        node {\r\n          title\r\n          create_at\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n// export const query = graphql`\r\n//   query($slug: String!) {\r\n//     mongodbVibloPosts(slug: {eq: $slug}) {\r\n//       contents\r\n//       title\r\n//     }\r\n//   }\r\n// `"],"sourceRoot":""}