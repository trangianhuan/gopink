{"version":3,"sources":["webpack://my-gatsby-site/./src/components/layout.js","webpack://my-gatsby-site/./src/pages/blog.js"],"names":["pageTitle","children","paramSearch","useStaticQuery","URLSearchParams","window","location","search","get","useState","param","setParam","id","className","to","width","height","title","src","autoComplete","type","placeholder","value","onChange","event","target","console","log","onClick","fetch","then","response","json","resultData","navigate","state","data","props","posts","setPosts","useEffect","map","book","key","slug"],"mappings":"2IA2EA,IAxEe,SAAC,GAA4B,EAA1BA,UAA2B,IAAhBC,EAAe,EAAfA,SAarBC,IAXOC,QAAe,cAUb,IAAIC,gBAAgBC,OAAOC,SAASC,QACxBC,IAAI,UAAY,IAC3C,GAA0BC,cAASP,GAA5BQ,EAAP,KAAcC,EAAd,KAoBA,OACE,4BACE,uBAAKC,GAAG,UACN,uBAAKC,UAAU,kBACT,uBAAKA,UAAU,oBACb,uBAAKA,UAAU,yBACX,uBAAKA,UAAU,8CACX,gBAAC,KAAD,CAAMC,GAAG,KACL,uBAAKC,MAAM,OAAOC,OAAO,OAAOC,MAAM,YAAYC,IAAI,4EAKlE,uBAAKL,UAAU,2BACX,uBAAKA,UAAU,6BACX,uBAAKA,UAAU,4BACX,yBAAOD,GAAG,uBAAuBO,aAAa,MAC5CC,KAAK,OACLC,YAAY,SACZC,MAAOZ,EACPa,SAtCP,SAACC,GACpBb,EAASa,EAAMC,OAAOH,OACtBI,QAAQC,IAAIjB,EAAOc,EAAMC,OAAOH,UAqCR,0BAAQV,GAAG,wBAAwBgB,QAAS,WAhCpEC,MAAM,qDAAqDnB,GACxDoB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,IACJC,QAAS,iBAAwBxB,EAAO,CACtCyB,MAAM,CACJC,KAAMH,cA+BF,uBAAKpB,UAAU,0BACf,uBAAKA,UAAU,8BAKzB,uBAAKA,UAAU,aACZZ,M,0ECjCT,UA7BiB,SAACoC,GAChBX,QAAQC,IAAIU,EAAMD,MAElB,OAA0B3B,cAAS,IAA5B6B,EAAP,KAAcC,EAAd,KAYA,OAXAC,gBAAU,WAERX,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJP,QAAQC,IAAIM,GACZM,EAASN,QAEZ,IAID,gBAAC,IAAD,CAAQjC,UAAU,UAAlB,YAEGsC,EAAMG,KAAI,SAAAC,GAAI,OACX,uBAAK7B,UAAU,OAAO8B,IAAKD,EAAK9B,IAC5B,gBAAC,KAAD,CAAME,GAAI,SAAW4B,EAAKE,MACtB,2BAAMF,EAAKzB","file":"component---src-pages-blog-js-710687576f76a8c71f0f.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Link, useStaticQuery, graphql, navigate } from 'gatsby'\r\n\r\nconst Layout = ({ pageTitle, children }) => {\r\n\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      site {\r\n        siteMetadata {\r\n          title\r\n          description\r\n        }\r\n      }\r\n    }\r\n  `)\r\n  const params = new URLSearchParams(window.location.search);\r\n  const paramSearch = params.get(\"param\") || '';\r\n  const [param, setParam] = useState(paramSearch)\r\n\r\n  const handleChange = (event) => {\r\n    setParam(event.target.value);\r\n    console.log(param, event.target.value)\r\n  }\r\n\r\n  const doSearch = () => {\r\n\r\n    fetch(`https://jsonplaceholder.typicode.com/todos?userId=${param}`)\r\n      .then(response => response.json()) // parse JSON from request\r\n      .then(resultData => {\r\n        navigate('/search' + '?param=' + param, {\r\n          state:{\r\n            data: resultData\r\n          }\r\n        });\r\n      })\r\n  }\r\n\r\n  return (\r\n    <main >\r\n      <div id=\"header\">\r\n        <div className=\"toolbar-inside\">\r\n              <div className=\"header-container\">\r\n                <div className=\"header-container-left\">\r\n                    <div className=\"toolbar-logo toolbar-subMenu-box header-fl\">\r\n                        <Link to=\"/\">\r\n                            <img width=\"24px\" height=\"24px\" title=\"shortpage\" src=\"https://trangianhuan.github.io/icon/awesome-icons/svg/user-shape.svg\" />\r\n                        </Link>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"header-container-middle\">\r\n                    <div className=\"toolbar-search onlySearch\">\r\n                        <div className=\"toolbar-search-container\">\r\n                            <input id=\"toolbar-search-input\" autoComplete=\"off\"\r\n                              type=\"text\"\r\n                              placeholder=\"search\"\r\n                              value={param}\r\n                              onChange={handleChange}/>\r\n                            <button id=\"toolbar-search-button\" onClick={() => doSearch()}></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"header-container-right\">\r\n                <div className=\"toolbar-btns onlyUser\"></div>\r\n                </div>\r\n              </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        {children}\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React, { useState, useEffect } from 'react'\r\nimport Layout from '../components/layout'\r\nimport { Link } from 'gatsby'\r\nimport { graphql } from \"gatsby\"\r\n\r\n\r\n\r\nconst BlogPage = (props) => {\r\n  console.log(props.data)\r\n  // const books = props.data.allMongodbVibloPosts.edges;\r\n  const [posts, setPosts] = useState([])\r\n  useEffect(() => {\r\n    // get data from GitHub api\r\n    fetch(`https://jsonplaceholder.typicode.com/todos`)\r\n      .then(response => response.json()) // parse JSON from request\r\n      .then(resultData => {\r\n        console.log(resultData)\r\n        setPosts(resultData)\r\n      }) // set data for the number of stars\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <Layout pageTitle=\"Blogs \">\r\n      blog page\r\n      {posts.map(book =>\r\n          <div className=\"book\" key={book.id}>\r\n              <Link to={'/post/' + book.slug}>\r\n                  <div>{book.title}</div>\r\n              </Link>\r\n          </div>\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogPage\r\n\r\n// export const query = graphql`\r\n//   query($path: String) {\r\n//     allSitePage(\r\n//       limit: 10\r\n//       sort: {order: DESC, fields: id}\r\n//       filter: {contents: {ne: null}}\r\n//     ) {\r\n//       edges {\r\n//         node {\r\n//           id\r\n//           content\r\n//           contents\r\n//           slug\r\n//           title\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// `\r\n\r\n// export const query = graphql`\r\n//   query {\r\n//     allMongodbVibloPosts(\r\n//       limit: 10\r\n//       sort: {order: DESC, fields: id}\r\n//       filter: {contents: {ne: null}}\r\n//     ) {\r\n//       edges {\r\n//         node {\r\n//           id\r\n//           content\r\n//           contents\r\n//           slug\r\n//           title\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// `\r\n\r\n"],"sourceRoot":""}