{"version":3,"sources":["webpack://my-gatsby-site/./src/components/layout.js","webpack://my-gatsby-site/./src/pages/search.js"],"names":["children","paramSearch","window","URLSearchParams","location","search","get","useState","param","setParam","id","className","to","width","height","alt","src","autoComplete","type","placeholder","value","onChange","event","target","console","log","onClick","fetch","then","response","json","resultData","navigate","state","data","props","params","setPosts","parameter1","setParameter1","useEffect"],"mappings":"6IAuEA,IApEe,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SAEZC,EAAc,GACI,oBAAXC,OAETD,EADe,IAAIE,gBAAgBD,OAAOE,SAASC,QAC9BC,IAAI,UAAY,GAErCL,EAAc,GAGhB,OAA0BM,cAASN,GAA5BO,EAAP,KAAcC,EAAd,KAoBA,OACE,4BACE,uBAAKC,GAAG,UACN,uBAAKC,UAAU,kBACT,uBAAKA,UAAU,oBACb,uBAAKA,UAAU,yBACX,uBAAKA,UAAU,8CACX,gBAAC,KAAD,CAAMC,GAAG,KACL,uBAAKC,MAAM,OAAOC,OAAO,OAAOC,IAAI,YAAYC,IAAI,4EAKhE,uBAAKL,UAAU,2BACX,uBAAKA,UAAU,6BACX,uBAAKA,UAAU,4BACX,yBAAOD,GAAG,uBAAuBO,aAAa,MAC5CC,KAAK,OACLC,YAAY,SACZC,MAAOZ,EACPa,SAtCP,SAACC,GACpBb,EAASa,EAAMC,OAAOH,OACtBI,QAAQC,IAAIjB,EAAOc,EAAMC,OAAOH,UAqCR,0BAAQV,GAAG,wBAAwBgB,QAAS,WAhCpEC,MAAM,qDAAqDnB,GACxDoB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,IACJC,QAAS,iBAAwBxB,EAAO,CACtCyB,MAAM,CACJC,KAAMH,cA+BF,uBAAKpB,UAAU,0BACf,uBAAKA,UAAU,8BAKzB,uBAAKA,UAAU,aACZX,M,iECzBT,UAjCmB,SAACmC,GAClBX,QAAQC,IAAIU,GACZ,IAAMC,EAAS,IAAIjC,gBAAgBgC,EAAM/B,SAASC,QAGlD,GAA0BE,cAAS,IAArB8B,GAAd,WACA,GAAoC9B,cAAS,IAAtC+B,EAAP,KAAmBC,EAAnB,KAoBA,OAnBAf,QAAQC,IAAIa,EAAYF,EAAO9B,IAAI,WAQnCkC,gBAAU,WAERb,MAAM,qDAAqDW,GACxDV,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJP,QAAQC,IAAIM,GACZM,EAASN,GACTQ,EAAcH,EAAO9B,IAAI,eAE5B,IAGD,gBAAC,IAAD","file":"component---src-pages-search-js-a89ac5031aa4faa8edcd.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Link, useStaticQuery, graphql, navigate } from 'gatsby'\r\n\r\nconst Layout = ({ children }) => {\r\n\r\n  let paramSearch = '';\r\n  if (typeof window !== 'undefined') {\r\n    const params = new URLSearchParams(window.location.search);\r\n    paramSearch = params.get(\"param\") || '';\r\n  } else {\r\n    paramSearch = '';\r\n  }\r\n\r\n  const [param, setParam] = useState(paramSearch)\r\n\r\n  const handleChange = (event) => {\r\n    setParam(event.target.value);\r\n    console.log(param, event.target.value)\r\n  }\r\n\r\n  const doSearch = () => {\r\n\r\n    fetch(`https://jsonplaceholder.typicode.com/todos?userId=${param}`)\r\n      .then(response => response.json()) // parse JSON from request\r\n      .then(resultData => {\r\n        navigate('/search' + '?param=' + param, {\r\n          state:{\r\n            data: resultData\r\n          }\r\n        });\r\n      })\r\n  }\r\n\r\n  return (\r\n    <main >\r\n      <div id=\"header\">\r\n        <div className=\"toolbar-inside\">\r\n              <div className=\"header-container\">\r\n                <div className=\"header-container-left\">\r\n                    <div className=\"toolbar-logo toolbar-subMenu-box header-fl\">\r\n                        <Link to=\"/\">\r\n                            <img width=\"24px\" height=\"24px\" alt=\"shortpage\" src=\"https://trangianhuan.github.io/icon/awesome-icons/svg/user-shape.svg\" />\r\n                        </Link>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"header-container-middle\">\r\n                    <div className=\"toolbar-search onlySearch\">\r\n                        <div className=\"toolbar-search-container\">\r\n                            <input id=\"toolbar-search-input\" autoComplete=\"off\"\r\n                              type=\"text\"\r\n                              placeholder=\"search\"\r\n                              value={param}\r\n                              onChange={handleChange}/>\r\n                            <button id=\"toolbar-search-button\" onClick={() => doSearch()}></button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"header-container-right\">\r\n                <div className=\"toolbar-btns onlyUser\"></div>\r\n                </div>\r\n              </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"container\">\r\n        {children}\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","import React, { useState, useEffect } from 'react'\r\nimport Layout from '../components/layout'\r\n// import { Link } from 'gatsby'\r\n// import { graphql } from \"gatsby\"\r\n\r\n\r\n\r\nconst SearchPage = (props) => {\r\n  console.log(props)\r\n  const params = new URLSearchParams(props.location.search);\r\n//   const parameter1 = params.get(\"param\");\r\n  // const books = props.data.allMongodbVibloPosts.edges;\r\n  const [posts, setPosts] = useState([])\r\n  const [parameter1, setParameter1] = useState('')\r\n  console.log(parameter1, params.get(\"param\"))\r\n\r\n//   if (parameter1 != params.get(\"param\")) {\r\n//     setPosts([])\r\n//     console.log('aaaaa')\r\n//     setParameter1(params.get(\"param\"))\r\n//   }\r\n\r\n  useEffect(() => {\r\n    // get data from GitHub api\r\n    fetch(`https://jsonplaceholder.typicode.com/todos?userId=${parameter1}`)\r\n      .then(response => response.json()) // parse JSON from request\r\n      .then(resultData => {\r\n        console.log(resultData)\r\n        setPosts(resultData)\r\n        setParameter1(params.get(\"param\"))\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <Layout>\r\n      search page\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default SearchPage\r\n"],"sourceRoot":""}